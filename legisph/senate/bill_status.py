# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/02C-senate-bill_status.ipynb.

# %% auto 0
__all__ = ['parse_senate_bill_status', 'Introduced', 'FirstReading', 'OrganizationalBriefing', 'PendingInCommittee',
           'CommitteeProceedings', 'Archived', 'CommitteeReportCalendaredForOrdinaryBusiness', 'TechnicalWorkingGroup',
           'SubmittedCommitteeReport', 'ConsolidatedOrSubstitutedInCommitteeReport', 'ApprovedOnSecondReading',
           'TransferredToCalendarForSpecialOrder', 'PeriodOfInterpellationClosed', 'SponsorshipSpeech',
           'SponsorshipSpeechInsertedIntoRecord', 'ApprovedOnThirdReading', 'SentToHouseOfRepresentatives',
           'IndividualAmendmentsOpened', 'IndividualAmendmentsClosed', 'CommitteeAmendmentsOpened',
           'CommitteeAmendmentsClosed', 'CopiesDistributed', 'ConsolidatedWithApprovedBill', 'ApprovedByPresident',
           'PendingSecondReading', 'ApprovedConferenceCommitteeReport', 'Interpellation',
           'PendingInHouseOfRepresentatives', 'Withdrawn', 'Sponsored']

# %% ../../notebooks/02C-senate-bill_status.ipynb 1
import re
import datetime

from typing import List, Optional
from nbdev.showdoc import show_doc

from .models import SenateBill, Senator, SenateCommittee

# %% ../../notebooks/02C-senate-bill_status.ipynb 8
def parse_senate_bill_status(
    status: SenateBill.SenateBillStatus,  # Senate Bill Status to parse into a subclass
    classes: list,  # List of classes through which to cycle
):
    actions = []
    for c in classes:
        action, cycle = c.parse(status)
        if action is not None:
            actions.append(action)
        if not cycle:
            break
    return actions


show_doc(parse_senate_bill_status)

# %% ../../notebooks/02C-senate-bill_status.ipynb 12
class Introduced(SenateBill.SenateBillStatus):
    """
    No matter where a legislative proposal originates, it can be introduced only by a
    member of Congress. In the Senate, a member may introduce any of several types of
    bills and resolutions by filing it with the Office of the Secretary.

    [Source](https://legacy.senate.gov.ph/about/legpro.asp#Introduction_of_Bills)
    """

    name: str = "Introduced by a Senator"
    senator: Senator

    @classmethod
    def parse(cls, h):
        if h.item.startswith("Introduced by Senator "):
            return (
                cls(
                    **h.dict(),
                    senator=Senator(
                        name=(
                            h.item.replace("Introduced by Senator ", "").replace(
                                ";", ""
                            )
                        )
                    )
                ),
                True,
            )
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 15
class FirstReading(SenateBill.SenateBillStatus):
    """
    Once a measure has been introduced and given a number, it is read and referred to an
    appropriate committee. It must be noted that during the reading of the bill, only
    the title and the author is read on the floor. The Senate President is responsible
    for referring bills introduced to appropriate committees.

    The jurisdictions of the Standing Committees are spelled out in Rule X, Section 13
    of the Rules of the Senate. For example, if a bill involves matters relating to
    agriculture, food production and agri-business, it must be referred to the
    Committee on Agriculture and Food.

    [Source](https://legacy.senate.gov.ph/about/legpro.asp#Bill_Referrals)
    """

    name: str = "Read on First Reading and Referred to Committee"
    committees: List[SenateCommittee]

    @classmethod
    def parse(cls, h):
        slug1 = "Read on First Reading and Referred to the Committee on "
        slug2 = "Read on First Reading and Referred to the Committee(s) on "
        slug3 = "Read on First Reading and referred to the Committee(s) on "
        slug4 = "Read on First Reading and Referred to the Committees on "
        if h.item.startswith(slug1):
            committee = SenateCommittee(name=h.item.replace(slug1, "").replace(";", ""))
            return (cls(**h.dict(), committees=[committee]), True)
        if (
            h.item.startswith(slug2)
            or h.item.startswith(slug3)
            or h.item.startswith(slug4)
        ):
            committees = h.item.replace(slug2, "").replace(slug3, "").replace(slug4, "")
            committees = re.split("[ ]*and[ ]*|[ ]*;[ ]*", committees)
            committees = [
                SenateCommittee(name=name) for name in committees if name != ""
            ]
            return (cls(**h.dict(), committees=committees), True)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 21
class OrganizationalBriefing(SenateBill.SenateBillStatus):
    name: str = "Organizational Briefing"

    @classmethod
    def parse(cls, h):
        if h.item == "Conducted ORGANIZATIONAL MEETING/BRIEFING;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 24
class PendingInCommittee(SenateBill.SenateBillStatus):
    """
    The standing committees of the Senate, operating as “little legislatures,” determine
    the fate of most proposals. There are committee hearings scheduled to discuss the
    bills referred. Committee members and staff frequently are experts in the subjects
    under their jurisdiction, and it is at the committee stage that a bill comes under
    the sharpest scrutiny. If a measure is to be substantially revised, the revision
    usually occurs at the committee level.

    [Source](https://legacy.senate.gov.ph/about/legpro.asp#In_Committee)
    """

    name: str = "Pending in Committee"

    @classmethod
    def parse(cls, h):
        if h.item == "Pending in the Committee":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 27
class CommitteeProceedings(SenateBill.SenateBillStatus):
    """
    The standing committees of the Senate, operating as “little legislatures,”
    determine the fate of most proposals. There are committee hearings scheduled to
    discuss the bills referred. Committee members and staff frequently are experts in
    the subjects under their jurisdiction, and it is at the committee stage that a bill
    comes under the sharpest scrutiny. If a measure is to be substantially revised, the
    revision usually occurs at the committee level.

    [Source](https://legacy.senate.gov.ph/about/legpro.asp#In_Committee)
    """

    name: str = "Conducted Committee Proceedings"
    joint: bool

    @classmethod
    def parse(cls, h):
        if h.item == "Conducted COMMITTEE MEETINGS/HEARINGS;":
            return (cls(**h.dict(), joint=False), False)
        if h.item == "Conducted JOINT COMMITTEE MEETINGS/HEARINGS;":
            return (cls(**h.dict(), joint=True), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 31
class Archived(SenateBill.SenateBillStatus):
    name: str = "Archived"

    @classmethod
    def parse(cls, h):
        if h.item == "SENT TO THE ARCHIVES.":
            return (cls(**h.dict()), False)
        if h.item == "Sent to the Archives":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 34
class CommitteeReportCalendaredForOrdinaryBusiness(SenateBill.SenateBillStatus):
    name: str = "Committe Report Calendared for Ordinary Business"

    @classmethod
    def parse(cls, h):
        if h.item in (
            "Committee Report Calendared for Ordinary Business;",
            "Committee Report calendared for Ordinary Business;",
        ):
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 37
class TechnicalWorkingGroup(SenateBill.SenateBillStatus):
    """
    A technical working group is an ad hoc group of experts on a particular topic who
    work together on specific goals.
    """

    name: str = "Conducted a Technical Working Group"

    @classmethod
    def parse(cls, h):
        if h.item == "Conducted TECHNICAL WORKING GROUP;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 40
class SubmittedCommitteeReport(SenateBill.SenateBillStatus):
    """
    A committee report describes the purpose and scope of the bill, explains any
    committee amendments, indicates proposed changes in existing law and such other
    materials that are relevant. Moreover, reports are numbered in the order in which
    they are filed and printed.
    """

    name: str = "Submitted Committee Report"

    @classmethod
    def parse(cls, h):
        if h.item == "Submitted said Committee Report to the Senate;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 42
class ConsolidatedOrSubstitutedInCommitteeReport(SenateBill.SenateBillStatus):
    """
    In the Committee Report, a bill is combined with another bill or substituted with
    another Senate Bill, effectively ending the life of this Senate Bill and continuing
    it in another one.
    """

    name: str = "Consolidated or Substituted in Committee Report"

    @classmethod
    def parse(cls, h):
        if h.item == "Consolidated/Substituted in the Committee Report":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 45
class ApprovedOnSecondReading(SenateBill.SenateBillStatus):
    name: str = "Approved On Second Reading"
    with_amendments: bool
    considered: Optional[str]

    @classmethod
    def parse(cls, h):
        if h.item == "Approved on Second Reading with Amendments;":
            return (cls(**h.dict(), with_amendments=True), False)
        if h.item == "Approved on Second Reading without Amendment;":
            return (cls(**h.dict(), with_amendments=False), False)
        slug1 = "Approved on Second Reading with Amendments, taking into consideration "
        if h.item.startswith(slug1):
            considered = h.item.replace(slug1, "")
            return (cls(**h.dict(), with_amendments=True, considered=considered), True)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 49
class TransferredToCalendarForSpecialOrder(SenateBill.SenateBillStatus):
    name: str = "Transferred to Calendar for Special Order"

    @classmethod
    def parse(cls, h):
        if h.item in (
            "Transferred from the Calendar for Ordinary Business to the Calendar for Special Order;",
            "Transferred from Ordinary Business to Special Order;",
            "Assigned for Consideration by Special Order;",
        ):
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 52
class PeriodOfInterpellationClosed(SenateBill.SenateBillStatus):
    name: str = "Period of Interpellation Closed"

    @classmethod
    def parse(cls, h):
        if h.item == "Period of interpellation closed;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 55
class SponsorshipSpeech(SenateBill.SenateBillStatus):
    name: str = "Sponsorship Speech"
    senators: List[Senator]

    @classmethod
    def parse(cls, h):
        slug1 = "Sponsorship speech of Senator(s) "
        if h.item.startswith(slug1):
            senators = (
                h.item.replace(slug1, "")
                .replace(" on the Conference Committee Report;", "")
                .replace(" on the conference committee report;", "")
            )
            senators = [Senator(name=name) for name in senators.split(" and ")]
            return (cls(**h.dict(), senators=senators), True)
        slug2 = "Sponsorship speech on the Conference Committee Report of Senator "
        if h.item.startswith(slug2):
            senators = [Senator(name=h.item.replace(slug2, "").replace(";", ""))]
            return (cls(**h.dict(), senators=senators), True)
        slug3 = "Sponsorship speech on the conference committee report of Senator "
        if h.item.startswith(slug3):
            senators = [Senator(name=h.item.replace(slug3, "").replace(";", ""))]
            return (cls(**h.dict(), senators=senators), True)
        slug4 = "Sponsorship speech of Senator "
        if h.item.startswith(slug4):
            senators = [
                Senator(
                    name=(
                        h.item.replace(slug4, "")
                        .replace(";", "")
                        .replace(" on the conference committee report", "")
                        .replace(" on the Conference Committee Report", "")
                    )
                )
            ]
            return (cls(**h.dict(), senators=senators), True)
        slug5 = "Sponsorship speech delivered by Senator "
        if h.item.startswith(slug5):
            senators = [Senator(name=h.item.replace(slug5, "").replace(";", ""))]
            return (cls(**h.dict(), senators=senators), True)
        slug6 = "Sponsorship Speech on the Conference Committee Report of Senator "
        slug7 = "Sponsorship speech on the  Conference Committee Report of Senator "
        if h.item.startswith(slug6) or h.item.startswith(slug7):
            senators = [
                Senator(
                    name=(h.item.replace(slug6, "").replace(slug7, "").replace(";", ""))
                )
            ]
            return (cls(**h.dict(), senators=senators), True)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 64
class SponsorshipSpeechInsertedIntoRecord(SenateBill.SenateBillStatus):
    name: str = "Sponsorship Speech Inserted into Record"

    @classmethod
    def parse(cls, h):
        if h.item == "Sponsorship speech inserted into the record;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 67
class ApprovedOnThirdReading(SenateBill.SenateBillStatus):
    name: str = "Approved on Third Reading"

    @classmethod
    def parse(cls, h):
        if h.item == "Approved on Third Reading;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 70
class SentToHouseOfRepresentatives(SenateBill.SenateBillStatus):
    name: str = "Sent to the House of Representatives"

    @classmethod
    def parse(cls, h):
        if h.item == "Sent to the House of Representatives requesting for concurrence;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 73
class IndividualAmendmentsOpened(SenateBill.SenateBillStatus):
    name: str = "Individual amendments opened"

    @classmethod
    def parse(cls, h):
        if h.item == "Period of individual amendments;":
            return (cls(**h.dict()), False)
        if h.item == "Period of amendment closed;":
            return (cls(**h.dict()), True)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 76
class IndividualAmendmentsClosed(SenateBill.SenateBillStatus):
    name: str = "Individual amendments closed"

    @classmethod
    def parse(cls, h):
        if h.item == "Period of individual amendments closed;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 79
class CommitteeAmendmentsOpened(SenateBill.SenateBillStatus):
    name: str = "Committee amendments opened"

    @classmethod
    def parse(cls, h):
        if h.item == "Period of committee amendments;":
            return (cls(**h.dict()), False)
        if h.item == "Period of amendment closed;":
            return (cls(**h.dict()), True)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 82
class CommitteeAmendmentsClosed(SenateBill.SenateBillStatus):
    name: str = "Committee amendments closed"

    @classmethod
    def parse(cls, h):
        if h.item == "Period of committee amendments closed;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 85
class CopiesDistributed(SenateBill.SenateBillStatus):
    name: str = "Copies Distributed to Senators"

    @classmethod
    def parse(cls, h):
        if h.item in (
            "Printed copies were distributed to the Senators;",
            "Printed Copies were distributed to the Senators;",
        ):
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 88
class ConsolidatedWithApprovedBill(SenateBill.SenateBillStatus):
    name: str = "Consolidated with Approved Bill"

    @classmethod
    def parse(cls, h):
        if h.item == "Consolidated with Approved Bill":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 91
class ApprovedByPresident(SenateBill.SenateBillStatus):
    name: str = "Approved by the President"

    @classmethod
    def parse(cls, h):
        if h.item == "Approved by the President of the Philippines":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 94
class PendingSecondReading(SenateBill.SenateBillStatus):
    name: str = "Pending Second Reading"
    type: str

    @classmethod
    def parse(cls, h):
        if h.item.startswith("Pending Second Reading, "):
            type = h.item.replace("Pending Second Reading, ", "")
            return (cls(**h.dict(), type=type), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 98
class ApprovedConferenceCommitteeReport(SenateBill.SenateBillStatus):
    name: str = "Approved Conference Committee Report"

    @classmethod
    def parse(cls, h):
        if h.item == "Conference Committee Report Approved by the Senate;":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 101
class Interpellation(SenateBill.SenateBillStatus):
    name: str = "Interpellation"
    senators: List[Senator]

    @classmethod
    def parse(cls, h):
        slug = "Interpellation of Senator "
        if h.item.startswith(slug):
            senators = [Senator(name=h.item.replace(slug, "").replace(";", ""))]
            return (cls(**h.dict(), senators=senators), True)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 104
class PendingInHouseOfRepresentatives(SenateBill.SenateBillStatus):
    name: str = "Pending in the House of Representatives"

    @classmethod
    def parse(cls, h):
        if h.item == "Pending in the House of Representatives":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 107
class Withdrawn(SenateBill.SenateBillStatus):
    name: str = "Withdrawn"

    @classmethod
    def parse(cls, h):
        if h.item == "Withdrawn":
            return (cls(**h.dict()), False)
        return (None, True)

# %% ../../notebooks/02C-senate-bill_status.ipynb 110
class Sponsored(SenateBill.SenateBillStatus):
    name: str = "Sponsored"
    senators: List[Senator]

    @classmethod
    def parse(cls, h):
        slug1 = "Sponsor:  Senator "
        slug2 = "Sponsor: Senator "
        slug3 = "Sponsor: Sen. "
        if (
            h.item.startswith(slug1)
            or h.item.startswith(slug2)
            or h.item.startswith(slug3)
        ):
            senators = [
                Senator(
                    name=(
                        h.item.replace(slug1, "")
                        .replace(slug2, "")
                        .replace(slug3, "")
                        .replace(";", "")
                    )
                )
            ]
            return (cls(**h.dict(), senators=senators), True)
        slug4 = "Sponsor: Senators "
        if h.item.startswith(slug4):
            senators = h.item.replace(slug4, "").replace(";", "")
            senators = [Senator(name=s.strip()) for s in senators.split(" and ")]
            return (cls(**h.dict(), senators=senators), True)
        return (None, True)
